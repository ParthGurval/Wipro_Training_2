
Day_11_Notes

Date: 08-08-2024

Naming Convention:

Package must be in lower case

syntax: domain.company.project.module.submodule;

com.wipro.bank.login.user;

Types of Variables:

		In Java, variables are categorized based on their scope, lifetime, and where they are declared. Here’s an overview of the different types of variables:

		### 1. **Local Variables**

		- **Definition:** Local variables are declared inside a method, constructor, or block (such as loops or conditionals).
		- **Scope:** They are accessible only within the method, constructor, or block where they are declared.
		- **Lifetime:** They exist only while the method or block is executing.
		- **Initialization:** Local variables must be initialized before they are used.
		- **Example:**

			```java
			public class Example {
				public void myMethod() {
					int localVar = 10; // Local variable
					System.out.println(localVar);
				}
			}
			```

		### 2. **Instance Variables**

		- **Definition:** Instance variables are declared within a class but outside any method, constructor, or block.
		- **Scope:** They are accessible from all methods, constructors, and blocks within the class.
		- **Lifetime:** They exist as long as the object of the class exists.
		- **Initialization:** They are initialized to default values (e.g., `0` for numeric types, `null` for objects) if not explicitly initialized.
		- **Example:**

			```java
			public class Example {
				int instanceVar; // Instance variable

				public void display() {
					System.out.println(instanceVar);
				}
			}
			```

		### 3. **Class Variables (Static Variables)**

		- **Definition:** Class variables are declared with the `static` keyword inside a class but outside any method, constructor, or block.
		- **Scope:** They are accessible from all methods, constructors, and blocks within the class, and also from other classes (using the class name).
		- **Lifetime:** They exist as long as the class is loaded in memory, shared among all instances of the class.
		- **Initialization:** They are initialized to default values if not explicitly initialized.
		- **Example:**

			```java
			public class Example {
				static int classVar; // Class variable

				public void display() {
					System.out.println(classVar);
				}
			}
			```

		### 4. **Parameters**

		- **Definition:** Parameters are variables that are passed to methods, constructors, or blocks.
		- **Scope:** They are accessible only within the method, constructor, or block where they are used.
		- **Lifetime:** They exist only during the execution of the method or constructor.
		- **Initialization:** They are initialized with the values passed when the method or constructor is called.
		- **Example:**

			```java
			public class Example {
				public void printMessage(String message) { // 'message' is a parameter
					System.out.println(message);
				}
			}
			```

		### Summary

		- **Local Variables:** Declared within methods, constructors, or blocks; accessible only within that scope.
		- **Instance Variables:** Declared within a class but outside methods; specific to each instance of the class.
		- **Class Variables (Static Variables):** Declared with `static`; shared across all instances of the class.
		- **Parameters:** Passed to methods or constructors; used within those methods or constructors.

		Understanding these variable types helps in managing scope and memory effectively in Java programs.






Final Keyword

		In Java, the `final` keyword is used to define constants, ensuring that once a variable, method, or class is marked as `final`, its value or behavior cannot be modified. Here’s a detailed look at what `final` means in different contexts:

		### 1. **Final Variables**

		- **Definition:** A variable declared with the `final` keyword can be assigned a value only once. After its initial assignment, the value of a `final` variable cannot be changed.
		- **Scope:** It can be a local variable, instance variable, or class variable.
		- **Initialization:** A `final` variable must be initialized either at the time of declaration or in the constructor if it is an instance variable.
		- **Usage:** Final variables are commonly used to define constants.

		**Example:**

		```java
		public class Example {
			// Final instance variable
			final int MAX_VALUE = 100;

			public void display() {
				// MAX_VALUE = 200; // This would cause a compile-time error
				System.out.println(MAX_VALUE);
			}
		}
		```

		### 2. **Final Methods**

		- **Definition:** A method declared with `final` cannot be overridden by subclasses.
		- **Purpose:** To prevent altering the implementation of a method that could affect the behavior of the class or its subclasses.
		- **Usage:** Often used to maintain the consistency of behavior across inheritance hierarchies.

		**Example:**

		```java
		public class BaseClass {
			// Final method
			public final void display() {
				System.out.println("BaseClass display");
			}
		}

		public class SubClass extends BaseClass {
			// Trying to override the final method will cause a compile-time error
			// public void display() {
			//     System.out.println("SubClass display");
			// }
		}
		```

		### 3. **Final Classes**

		- **Definition:** A class declared with `final` cannot be subclassed (i.e., no class can extend it).
		- **Purpose:** To prevent inheritance, which can be useful to ensure the class's behavior remains unchanged.
		- **Usage:** Often used for classes that should not be extended, such as utility classes.

		**Example:**

		```java
		public final class FinalClass {
			// Class code
		}

		// Attempting to extend FinalClass will cause a compile-time error
		// public class SubClass extends FinalClass {
		// }
		```

		### 4. **Final Parameters**

		- **Definition:** Parameters in methods or constructors can also be marked as `final`. A `final` parameter cannot be reassigned within the method or constructor.
		- **Purpose:** To ensure that the parameter value remains unchanged during method execution, which can help in maintaining clarity and avoiding accidental modifications.

		**Example:**

		```java
		public class Example {
			public void process(final int number) {
				// number = 10; // This would cause a compile-time error
				System.out.println(number);
			}
		}
		```

		### Summary

		- **Final Variables:** Can be assigned once and become constants. Used to define immutable values.
		- **Final Methods:** Cannot be overridden by subclasses. Used to prevent changing method behavior in subclasses.
		- **Final Classes:** Cannot be extended. Used to prevent inheritance.
		- **Final Parameters:** Cannot be modified within methods or constructors. Ensures parameter values remain constant during method execution.

		Using `final` effectively helps in creating more reliable and maintainable Java code by controlling and limiting how certain components can be modified or extended.
		
		





what is collection and collection framework:

		In Java, **collections** and the **collection framework** are fundamental concepts for handling groups of objects. Here’s an overview:

		### **1. Collection**

		A **collection** is simply a group of objects stored together. Collections are used to store, retrieve, manipulate, and communicate aggregate data.

		- **Types of Collections:**
		  - **List:** An ordered collection that allows duplicates. Example: `ArrayList`, `LinkedList`.
		  - **Set:** A collection that does not allow duplicates. Example: `HashSet`, `LinkedHashSet`, `TreeSet`.
		  - **Queue:** A collection used for holding elements prior to processing. Example: `LinkedList`, `PriorityQueue`.
		  - **Deque (Double-ended Queue):** A queue that supports element insertion and removal at both ends. Example: `ArrayDeque`, `LinkedList`.

		### **2. Collection Framework**

		The **Collection Framework** in Java is a unified architecture for representing and manipulating collections. It provides a set of interfaces and classes that implement common data structures and algorithms.

		#### **Core Interfaces**

		1. **`Collection` Interface:**
		   - The root interface in the collection hierarchy. It represents a group of objects known as elements. Common methods include `add()`, `remove()`, `size()`, and `iterator()`.
		   - Direct subinterfaces include `Set`, `List`, and `Queue`.

		2. **`List` Interface:**
		   - Represents an ordered collection (sequence) of elements. Elements can be accessed by their position (index).
		   - **Implementations:** `ArrayList`, `LinkedList`, `Vector`, `Stack`.

		3. **`Set` Interface:**
		   - Represents a collection that does not allow duplicate elements. It models the mathematical set abstraction.
		   - **Implementations:** `HashSet`, `LinkedHashSet`, `TreeSet`.

		4. **`Queue` Interface:**
		   - Represents a collection designed for holding elements prior to processing. Typically follows FIFO (First In, First Out) order.
		   - **Implementations:** `LinkedList`, `PriorityQueue`, `ArrayDeque`.

		5. **`Deque` Interface:**
		   - Extends `Queue` to support insertion and removal of elements from both ends.
		   - **Implementations:** `ArrayDeque`, `LinkedList`.

		6. **`Map` Interface:**
		   - Represents a collection of key-value pairs where each key is unique. It’s not a true child of `Collection` but is part of the collection framework.
		   - **Implementations:** `HashMap`, `LinkedHashMap`, `TreeMap`, `Hashtable`.

		#### **Core Classes**

		- **`ArrayList`:** A resizable array implementation of the `List` interface. It provides fast random access but slower insertion and deletion compared to `LinkedList`.

		- **`LinkedList`:** A doubly-linked list implementation of the `List` and `Deque` interfaces. It provides faster insertions and deletions but slower access compared to `ArrayList`.

		- **`HashSet`:** A hash table-backed implementation of the `Set` interface. It provides constant-time performance for basic operations (add, remove, contains).

		- **`TreeSet`:** A `NavigableSet` implementation that uses a red-black tree. It provides a sorted view of elements and has log-time complexity for basic operations.

		- **`PriorityQueue`:** An implementation of the `Queue` interface that orders its elements according to their natural ordering or by a comparator provided at queue construction time.

		- **`HashMap`:** A hash table-backed implementation of the `Map` interface. It provides constant-time performance for basic operations (get, put).

		- **`TreeMap`:** A `NavigableMap` implementation that uses a red-black tree. It provides a sorted map and has log-time complexity for basic operations.

		#### **Key Features**

		- **Unified Architecture:** The collection framework provides a standard set of interfaces and implementations, promoting consistency across different types of collections.
		- **Algorithms:** The framework includes utility classes (`Collections`, `Arrays`) that provide algorithms for sorting, searching, and other operations.
		- **Generics:** The collection framework uses generics to ensure type safety and reduce the need for type casting.

		### **Example**

		Here’s a simple example demonstrating the use of a `List` and a `Set`:

		```java
		import java.util.ArrayList;
		import java.util.HashSet;
		import java.util.List;
		import java.util.Set;

		public class CollectionExample {
			public static void main(String[] args) {
				// Using List
				List<String> list = new ArrayList<>();
				list.add("Apple");
				list.add("Banana");
				list.add("Apple"); // Duplicates allowed
				System.out.println("List: " + list);

				// Using Set
				Set<String> set = new HashSet<>();
				set.add("Apple");
				set.add("Banana");
				set.add("Apple"); // Duplicates not allowed
				System.out.println("Set: " + set);
			}
		}
		```

		In this example:
		- `ArrayList` allows duplicates and maintains insertion order.
		- `HashSet` does not allow duplicates and does not maintain insertion order.

		Understanding the collection framework helps in selecting the right data structure for your application needs and leveraging Java's built-in functionalities effectively.
		
		
what is interface:

		In Java, an **interface** is a reference type, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types. Interfaces are used to specify a contract that classes can implement. Here’s a detailed overview of interfaces:

		### **1. Definition and Purpose**

		- **Definition:** An interface defines a set of abstract methods (methods without a body) that implementing classes must provide. Interfaces can also contain default methods with implementations and static methods.
		- **Purpose:** Interfaces are used to achieve abstraction and multiple inheritance in Java. They allow you to define methods that one or more classes must implement, providing a way to enforce certain behaviors across different classes.

		### **2. Syntax**

		To define an interface, you use the `interface` keyword. Here's a basic example:

		```java
		public interface Animal {
			// Abstract method (does not have a body)
			void makeSound();

			// Default method (can have a body)
			default void sleep() {
				System.out.println("This animal sleeps.");
			}

			// Static method (can have a body)
			static void eat() {
				System.out.println("Animals eat food.");
			}
		}
		```

		### **3. Key Features**

		- **Abstract Methods:** By default, all methods in an interface are abstract (i.e., they don’t have a body). However, from Java 8 onwards, interfaces can also include default and static methods with implementations.
		  
		- **Default Methods:** Introduced in Java 8, default methods allow you to add new methods to interfaces with a default implementation. This helps in evolving interfaces without breaking existing implementations.
		  
		- **Static Methods:** These methods belong to the interface itself, not to instances of the interface. They are called using the interface name.
		  
		- **No Constructors:** Interfaces cannot have constructors, as they cannot be instantiated directly.

		- **Constants:** Interfaces can contain constants (public, static, and final fields). These are usually used to define fixed values that are shared across implementing classes.

		### **4. Implementing an Interface**

		To implement an interface, a class must provide concrete implementations for all abstract methods defined in the interface. A class can implement multiple interfaces, achieving multiple inheritance.

		**Example:**

		```java
		public class Dog implements Animal {
			@Override
			public void makeSound() {
				System.out.println("Dog barks.");
			}
		}

		public class Test {
			public static void main(String[] args) {
				Dog dog = new Dog();
				dog.makeSound(); // Output: Dog barks.
				dog.sleep();     // Output: This animal sleeps.
				Animal.eat();    // Output: Animals eat food.
			}
		}
		```

		### **5. Multiple Inheritance**

		Java does not support multiple inheritance of classes but allows a class to implement multiple interfaces. This allows a class to inherit behavior from more than one source.

		**Example:**

		```java
		interface Animal {
			void makeSound();
		}

		interface Pet {
			void play();
		}

		public class Dog implements Animal, Pet {
			@Override
			public void makeSound() {
				System.out.println("Dog barks.");
			}

			@Override
			public void play() {
				System.out.println("Dog plays.");
			}
		}
		```

		### **6. Common Uses of Interfaces**

		- **Defining Common Behaviors:** Interfaces are used to define common behaviors that can be implemented by different classes, regardless of their position in the class hierarchy.
		  
		- **Dependency Injection:** Interfaces help in designing flexible and decoupled systems where dependencies can be injected rather than hard-coded.

		- **Polymorphism:** Interfaces enable polymorphism by allowing different classes to be treated through a common interface type.

		### **Summary**

		- **Interfaces** define a contract that implementing classes must adhere to.
		- They can include abstract methods, default methods, static methods, and constants.
		- **Classes** implement interfaces to provide concrete behaviors and can implement multiple interfaces.
		- Interfaces are key to achieving abstraction, multiple inheritance, and polymorphism in Java.
		
		
		
	
what is abstract class

		In Java, an abstract class is a class that cannot be instantiated on its own and is designed to be subclassed. 
		It provides a way to define a common base with shared functionality and a blueprint for other classes. 
		Here’s a detailed overview of abstract classes:

		1. Definition and Purpose
		
		Definition: An abstract class is declared using the abstract keyword. 
		It can include abstract methods (methods without a body) that must be implemented by subclasses, as well as concrete methods (methods with a body) 
		that provide shared functionality.

		Purpose: 
		Abstract classes are used to define a base class with common functionality and to enforce a contract for subclasses. 
		They allow you to define methods that must be implemented by any subclass while also providing some default behavior.
		
		2. Syntax
		
	public abstract class Animal {
    // Abstract method (does not have a body)
    public abstract void makeSound();

    // Concrete method (with a body)
    public void eat() {
        System.out.println("This animal eats.");
    }
	}

	3. Key Features:
	
		Abstract Methods: An abstract class can have one or more abstract methods. 
		These methods do not have a body and must be implemented by subclasses. 
		Abstract methods are declared using the abstract keyword and do not have a method body.

		Concrete Methods: An abstract class can also have concrete methods (methods with a body) that provide 
		default behavior that subclasses can use or override.

		Constructors: Abstract classes can have constructors, which are called when a subclass is instantiated. 
		However, you cannot instantiate an abstract class directly.

		Fields and Properties: Abstract classes can have fields and properties (variables), which can be inherited by subclasses.

		No Instantiation: You cannot create instances of an abstract class directly. Instead, you must create instances of concrete subclasses that 
		extend the abstract class.
		
	4. Example:
	
	// Abstract class
	public abstract class Animal {
		// Abstract method
		public abstract void makeSound();

		// Concrete method
		public void eat() {
			System.out.println("This animal eats.");
		}
	}

	// Concrete subclass
	public class Dog extends Animal {
		@Override
		public void makeSound() {
			System.out.println("Dog barks.");
		}
	}

	// Concrete subclass
	public class Cat extends Animal {
		@Override
		public void makeSound() {
			System.out.println("Cat meows.");
		}
	}

	// Test class
	public class Test {
		public static void main(String[] args) {
			Animal dog = new Dog();
			dog.makeSound(); // Output: Dog barks.
			dog.eat();       // Output: This animal eats.

			Animal cat = new Cat();
			cat.makeSound(); // Output: Cat meows.
			cat.eat();       // Output: This animal eats.
		}
	}

	5. Key Points to Remember
		Cannot Be Instantiated: You cannot create an instance of an abstract class. 
		It must be subclassed, and the subclass must implement all abstract methods to become concrete.

		Partial Implementation: Abstract classes allow you to provide some default implementation while forcing subclasses 
		to provide specific implementations for abstract methods.

		Inheritance: Abstract classes can be extended by other classes, which can either be concrete or abstract themselves.

		Abstract Classes vs. Interfaces: Abstract classes can provide default behavior and maintain state, while interfaces can only provide 
		method signatures (before Java 8). Interfaces are more flexible for defining behavior that can be shared across unrelated classes.

		6. When to Use
		
		When You Have Common Code: Use an abstract class when you have a base class with common code that multiple subclasses will share.
		To Define a Template: Use an abstract class to define a template with abstract methods that concrete subclasses must implement.
		To Provide Default Behavior: Use an abstract class to provide default behavior that subclasses can either use as-is or override.

		
diff btn abstract class and interface in short

		Here’s a concise comparison between **abstract classes** and **interfaces** in Java:

		### **Abstract Class vs. Interface**

		#### **1. Definition:**

		- **Abstract Class:**
		  - A class that cannot be instantiated and can contain both abstract (without a body) and concrete (with a body) methods.

		- **Interface:**
		  - A reference type that can contain abstract methods (from Java 8), default methods, static methods, and constants. It defines a contract for what methods a class should implement.

		#### **2. Inheritance:**

		- **Abstract Class:**
		  - A class can extend only one abstract class (single inheritance).

		- **Interface:**
		  - A class can implement multiple interfaces (multiple inheritance).

		#### **3. Methods:**

		- **Abstract Class:**
		  - Can have both abstract methods and methods with implementations (concrete methods).

		- **Interface:**
		  - Can have abstract methods (no body), default methods (with body), and static methods (with body). From Java 9, interfaces can also have private methods.

		#### **4. Fields:**

		- **Abstract Class:**
		  - Can have fields with any access modifier (public, protected, private) and can include instance variables.

		- **Interface:**
		  - Can only have public, static, and final fields (constants). All fields in an interface are implicitly `public static final`.

		#### **5. Constructor:**

		- **Abstract Class:**
		  - Can have constructors. These constructors are called when a subclass is instantiated.

		- **Interface:**
		  - Cannot have constructors.

		#### **6. Access Modifiers:**

		- **Abstract Class:**
		  - Can use any access modifier (public, protected, private) for methods and fields.

		- **Interface:**
		  - Methods are implicitly `public` and abstract (unless they are static or default). Fields are implicitly `public`, `static`, and `final`.

		#### **7. Usage:**

		- **Abstract Class:**
		  - Used when you need a common base with shared code and behavior that subclasses can inherit and override.

		- **Interface:**
		  - Used to define a contract that multiple classes can implement, often for unrelated classes or to provide a common set of methods.

		### **Summary**

		- **Abstract Class:** Suitable for sharing code and defining common behavior. Supports single inheritance.
		- **Interface:** Ideal for defining a contract that multiple classes can implement, supporting multiple inheritance. 

		Both abstract classes and interfaces are used to achieve abstraction in Java, but they serve different purposes and have distinct characteristics.
		
		
what is abstraction

		**Abstraction** is one of the core principles of object-oriented programming (OOP) and is used to manage complexity by hiding the implementation details and showing only the essential features of an object. In Java, abstraction helps in creating a clear separation between what an object does and how it does it.

		### **Key Aspects of Abstraction**

		1. **Definition:**
		   - **Abstraction** means representing essential features without including background details or explanations. It focuses on what an object does rather than how it does it.

		2. **Purpose:**
		   - To simplify complex systems by hiding implementation details and showing only the relevant parts.
		   - To reduce complexity and increase efficiency by providing a clear and simple interface.

		3. **How Abstraction is Achieved in Java:**

		   - **Abstract Classes:**
			 - Abstract classes are used to provide a partial implementation of an object.
			 - They can have abstract methods (without a body) that must be implemented by subclasses, as well as concrete methods (with a body).
			 - Abstract classes can also have fields and constructors.
			 - **Example:**
			   ```java
			   abstract class Shape {
				   abstract void draw(); // Abstract method

				   void fillColor() {    // Concrete method
					   System.out.println("Filling color");
				   }
			   }

			   class Circle extends Shape {
				   @Override
				   void draw() {
					   System.out.println("Drawing Circle");
				   }
			   }
			   ```

		   - **Interfaces:**
			 - Interfaces provide a way to define a contract or a set of methods that implementing classes must adhere to.
			 - Before Java 8, interfaces could only contain abstract methods. From Java 8 onwards, interfaces can also contain default methods (with a body) and static methods.
			 - Interfaces are used to achieve abstraction and multiple inheritance in Java.
			 - **Example:**
			   ```java
			   interface Drawable {
				   void draw(); // Abstract method
			   }

			   class Rectangle implements Drawable {
				   @Override
				   public void draw() {
					   System.out.println("Drawing Rectangle");
				   }
			   }
			   ```

		### **Benefits of Abstraction**

		1. **Simplification:**
		   - By hiding implementation details, abstraction simplifies the interaction with objects and reduces complexity.

		2. **Maintainability:**
		   - Changes in the implementation of a class or an interface do not affect the code that uses the class or implements the interface, as long as the interface remains consistent.

		3. **Flexibility:**
		   - Abstract classes and interfaces allow you to change or extend implementations without affecting other parts of the system, promoting flexibility and adaptability.

		4. **Code Reusability:**
		   - Abstraction enables code reuse by providing a common interface or base class that can be extended or implemented by multiple classes.

		### **Summary**

		- **Abstraction** is the concept of hiding implementation details and showing only the essential features of an object.
		- In Java, abstraction is achieved using **abstract classes** and **interfaces**.
		- **Abstract Classes** provide a base with some implementation and abstract methods that must be implemented by subclasses.
		- **Interfaces** define a contract with abstract methods that implementing classes must provide and can also include default and static methods.

		Abstraction is crucial for managing complexity, improving code organization, and fostering a clean separation between an object's interface and its implementation.
		
		
		
		
why we get hashcode

		In Java, when you print an array directly (like `System.out.println(arr1)`), the output shows the array's type and its hash code, which represents its memory address. This is because the default `toString()` method of the array class (inherited from `Object`) is used, and it provides a string representation consisting of the array's type and its hash code.

		To print the contents of the array instead, you should use `Arrays.toString(arr1)` from the `java.util.Arrays` utility class:

		```java
		import java.util.Arrays;

		public class ArrayListExample {
			public static void main(String[] args) {
				int arr1[] = {};
				System.out.println(Arrays.toString(arr1)); // Outputs: []
				System.out.println(arr1.length);            // Outputs: 0
			}
		}
		```

		In this corrected example:
		- `Arrays.toString(arr1)` provides a human-readable string representation of the array's contents. For an empty array, it prints `[]`.
		- `arr1.length` provides the number of elements in the array, which is `0` for an empty array.
		


what is arraylist, why we use it and when we use it example

		An `ArrayList` in Java is a resizable array implementation of the `List` interface, used to store a dynamically sized collection of elements.

		**Why We Use It:**
		- It automatically resizes as elements are added or removed.
		- It provides convenient methods for adding, removing, and accessing elements.

		**When to Use It:**
		- When you need a flexible-sized array with dynamic insertion and removal of elements.

		**Example:**

		```java
		import java.util.ArrayList;

		public class ArrayListExample {
			public static void main(String[] args) {
				ArrayList<String> list = new ArrayList<>();
				list.add("Apple");
				list.add("Banana");
				list.add("Cherry");
				
				// Access elements
				System.out.println(list.get(1)); // Output: Banana
				
				// Remove an element
				list.remove("Banana");
				
				// Iterate over the list
				for (String fruit : list) {
					System.out.println(fruit);
				}
			}
		}
